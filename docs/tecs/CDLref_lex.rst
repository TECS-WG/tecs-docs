.. _CDLref-lex:

字句
=======

TECS CDL の字句には、以下のものがあります。

 * キーワード
 * 指定子キーワード
 * 識別子
 * リテラル
 * 型名
 * 記号

字句の区切りとして 0 個以上または、1 個以上の空白文字を使用します。

16 進数で 20 以下の文字コードは空白文字として扱われます。

TECS CDL の字句は1文字以上の空白文字によって区切られます。
ただし、空白文字がなくても字句が決定できる場合には、この限りではありません。

【制限】全角の空白文字は、空白文字とはみなされない。

キーワード
----------------

以下の語は、キーワードです。
キーワードは、識別子として用いることができません。

 attr bool_t C_EXP call cell celltype char char_t composite
 const Descriptor double64_t entry enum enum16 enum32 enum64
 enum8 factory FACTORY false float32_t generate import import_C
 int int128_t int16_t int32_t int64_t int8_t  long namespace
 region require schar_t short signature signed struct true
 typedef uchar_t uint128_t uint16_t uint32_t uint64_t uint8_t
 unsigned var void volatile

指定子キーワード
-------------------------

以下の語は、指定子キーワードです。

指定子を記述可能な箇所 ('[', ']' に囲まれた箇所) においてのみキーワードとして扱われます。
従って、指定子キーワードを識別子として用いることができます。
ただし、指定子キーワードとして扱われる箇所に現れる識別子としては用いることができません。
例えば size_is などの引数に現れる場合には、指定子キーワードとは異なる語を用いる必要があります。

 active allocator choice class context count_is deviate
 omain dynamic id idx_is_id in in_through inline inout
 linkunit node nullable omit oneway optional out
 out_through prototype receive ref_desc send singleton
 size_is string through to_through

識別子
--------------------

識別子は、TECS CDL で定義する種々の物 (シグニチャ、セルタイプ、セルなど) の名前として用います。

識別子は、アルファベットまたは '_' で始まり、アルファベット、数字または '_' の繰返しからなります。

TECS CDL において識別子の長さを規定しませんが、CDL 記述を C 言語に翻訳する際にネームスペース、セルタイプ名、セル名、呼び口名、受け口名が連結されるため、連結語の長さが C コンパイラの識別可能な長さを超えない配慮が必要になります。
今日の多くのコンパイラは 255 文字までの長さの識別子を識別可能です。少なくとも、この長さに収まるようにする必要があります。

リテラル
--------------------

リテラルは、 TECS CDL において値を表現するものです。

リテラルには、以下のものがあります。

 * 16進数リテラル (HEX_CONSTANT)
 * 8進数リテラル (OCTAL_CONSTANT)
 * 整数リテラル (INTEGER_CONSTANT)
 * 浮動小数リテラル (FLOATING_CONSTANT)
 * 文字列リテラル (STRING_LITERAL)
 * 山括弧文字列リテラル (AB_STRING_LITERAL)
 * 文字リテラル (CHARACTER_LITERAL)
 * ブール値リテラル (TRUE / FALSE)

【補足説明】上記の括弧内は、TECS ジェネレータの終端記号の名前である。

 16進数リテラル:: '0x' で始まり、0-9 および/または a-f, A-F の 1 個以上繰返しです。

 8進数リテラル:: '0' で始まり、0-7 の 1 個以上繰返しです。

 浮動小数リテラル:: 1-9 で始まり 0-9 の繰返し（整数部）に続いて '.'、続いて 0-9 の 0 個以上の繰返し（小数部）、さらに続いて 'e' または 'E' に続く、符号 '+' または '-' （省略化）、最後に 0-9 の 1個以上の繰返し（'e' または 'E' 以降、ここまで指数部）です。
 小数部、指数部は省略可能である。ただし、0 に続いて '.' が続く場合は、8進数リテラルに優先して浮動小数として扱われます。

【補足説明】浮動小数リテラルは C 言語のそれよりも若干制限が強い。例えば ".1" は C 言語では正当な浮動小数であるが、TECS CDL においては浮動小数とはみなされない。

 整数リテラル:: 1-9 で始まり、0-9 の 0 個以上繰返し、または '0' です。

 文字列リテラル:: ダブルクオート '"' で囲まれた文字列です。

    文字列リテラルに、ダブルクオートを含めるためには、バックスラッシュ '\' を前置します。
    文字列リテラルが改行文字を含む場合にも、行末に バックスラッシュ '\' を置きます。

    C 言語においては、バックスラッシュを前置することで改行コードなどの制御コードを記述しますが TECS CDL においては解釈せず、バックスラッシュの削除も行いません。
    これは、文字列リテラルがそのまま C 言語へ渡されるためです。

    ただし、factory または FACTORY の引数として与えられた場合には別に扱われます。以下は、制御文字コードに置換されます。
       * "\n" … 改行コード
       * "\r" … 復帰コード
       * "\f" … フィードコード
       * "\t" … TAB コード

    これ以外に、バックスラッシュが前置されている場合、バックスラッシュは取り除かれ、それに続く文字は無条件に文字列の一部として扱われます。

【参照実装における制限】漢字を扱うための文字コードは SJIS, EUC, UTF8 を用いることができる。ただし SJIS を用いる場合には、C コンパイラが SJIS を扱えるものを用いなくてはならない。SJIS の文字コードには、第二バイトに
        0x5c  ('\', バックスラッシュ)

     を含むものがある。SJIS を扱えない　C コンパイラでは、第2バイトの 0x5c をエスケープ文字として扱ってしまう。


 山括弧文字列リテラル:: 山括弧 '<', '>' で囲まれた文字列です。
                  この文字列には、アルファベットの大文字、小文字、'_', '.', ' ' (空白文字) のみを用いることができます。

 文字リテラル:: シングルクオートで囲まれた一文字です。
            文字リテラルは、その文字コードの整数として扱われます。
            バックスラッシュを前置することで、バックスラッシュに続くもう一文字を文字リテラルの一部として扱われます。

【参照実装における制限】多バイト文字を一文字として扱うことができる。ただし、C コンパイラが多バイト文字を、文字定数として扱うことができる必要がある。ポータビリティの観点からは、用いることは好ましくない。

 ブール値リテラル:: true または false です．C 言語においては、整数の 1 と 0 に対応付けられます。

型名
----------------

typedef により定義される型名は、識別子と同じです。

ただし、typedef により定義されて以降は、「型名」として扱われ識別子とは区別されます。
このため typedef により型名として定義された識別子は、変数名、関数名の識別子としては用いることができません。

【参照実装における制限】型名を識別子とは別のリテラルとして扱うのは、実装上の理由による。

コメント
----------------

コメントとして記述された文字列は、TECS CDL の記述として解釈されません。
コメントの文字列は、以下の2通りの方法で記述できます。

 * '/*', '*/' で囲んだ文字列
 * '!//' から行末までの文字列

'/*' と '*/' の間には、改行文字を含むことができる。しかし、入れ子にすることはできません。

